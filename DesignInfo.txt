Some formulas and logic used through out the project

1.TimeShift.py
    Sample Rate = (Total Discrete time signal samples) / (Total duration of the signal)
    Shifting is done by moving the bits of the numpy array of Discrete time signal by NO bits

2.DTFT.py 
    Xk[e^jw] = summation (x[n] * e^(-2j*k*pi/N)) from n 0 to N or in the range (N), where N is the total samples of len(x)
    its time complexity is of O(N^2) , which is substantially high for large input 
    So to reduce the time complexity and computational overload we use fast fourier transform 
    FFT is a special algorith to calculate DTFT, which is based on the fact that some values during multiplication between the signal and e^-jwn (sinusoidal signal) overlap.
    The overlap values are only calculated once and used whenever needed reducing the number of calculations
    The time complexity of FFT is O(N*logN).

3.FIR.py 
    This is the most complex project so far in this repo. Ideal low-pass filter is implemented in this project.
    The programme takes a sound wave input and perform fourier transform on the input sound wave and the ideal impulse signal 
    filter and plots the graph of both the transform.

    Using convolution on time domain output signal is calculated.
    The ideal impulse response h[n] is based on the cutoff frequency provided.

    Moreover, the final result is .wav file of the unfiltered and filtered Discrete time signal
    You can change:-
        1.input wav file name
        2.portion of the wav file to filter
        3.cutoff frequency
        by changing the suitable variable values in the code.



